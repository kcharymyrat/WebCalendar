type: edu
files:
  - name: resources/application.properties
    visible: true
    text: |+
      server.port=8080
      server.error.include-message=always
      
      management.endpoints.web.exposure.include=*
      management.endpoint.shutdown.enabled=true
    
    learner_created: false
  - name: src/webCalendarSpring/Application.kt
    visible: true
    text: |+
      package webCalendarSpring
      
      import org.springframework.boot.autoconfigure.SpringBootApplication
      import org.springframework.boot.runApplication
      
      @SpringBootApplication
      class WebCalenderApplication
      
      
      fun main(args: Array<String>) {
          runApplication<WebCalenderApplication>(*args)
      }
    
    learner_created: false
  - name: build.gradle
    visible: true
    text: |
      import org.jetbrains.kotlin.gradle.tasks.KotlinCompile
      
      buildscript {
          repositories {
              mavenCentral()
          }
          dependencies {
              classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$hs.kotlin.version"
              classpath "org.springframework.boot:spring-boot-gradle-plugin:$hs.spring.bootVersion"
              classpath "io.spring.gradle:dependency-management-plugin:$hs.spring.dependencyManagementVersion"
              classpath "org.jetbrains.kotlin:kotlin-allopen:$hs.kotlin.version"
              classpath "org.jetbrains.kotlin:kotlin-noarg:$hs.kotlin.version"
              classpath "org.springframework.data:spring-data-commons:3.0.1"
          }
      }
      
      apply plugin: 'java'
      apply plugin: 'kotlin'
      apply plugin: 'org.springframework.boot'
      apply plugin: 'io.spring.dependency-management'
      apply plugin: "kotlin-spring"
      apply plugin: "kotlin-jpa"
      
      repositories {
          mavenCentral()
      }
      
      sourceSets.main.resources.srcDirs = ["src/resources"]
      
      dependencies {
          implementation 'org.springframework.boot:spring-boot-starter'
          implementation 'org.springframework.boot:spring-boot-starter-actuator:3.1.2'
          implementation 'org.springframework.boot:spring-boot-starter-web:3.1.2'
          runtimeOnly 'com.h2database:h2'
          implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
          implementation 'org.springframework.boot:spring-boot-starter-validation'
          implementation("jakarta.validation:jakarta.validation-api:3.0.2")
          implementation("jakarta.persistence:jakarta.persistence-api:3.1.0")
          implementation 'org.jetbrains.kotlin:kotlin-reflect'
          implementation 'org.springframework.data:spring-data-commons:3.0.1'
      }
      
      test {
          jvmArgs '--add-opens', 'java.base/java.lang=ALL-UNNAMED'
      }
      
      tasks.withType(KotlinCompile) {
          kotlinOptions {
              freeCompilerArgs = ['-Xjsr305=strict']
              jvmTarget = "$hs.kotlin.javaVersion"
          }
      }
    learner_created: false
  - name: test/WebCalendarSpringTest.java
    visible: false
    text: |
      import com.google.gson.Gson;
      import com.google.gson.JsonArray;
      import com.google.gson.JsonElement;
      import com.google.gson.JsonParser;
      import org.hyperskill.hstest.dynamic.DynamicTest;
      import org.hyperskill.hstest.dynamic.input.DynamicTesting;
      import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
      import org.hyperskill.hstest.mocks.web.response.HttpResponse;
      import org.hyperskill.hstest.stage.SpringTest;
      import org.hyperskill.hstest.testcase.CheckResult;
      import webCalendarSpring.ApplicationKt;
      
      import java.time.LocalDate;
      import java.util.ArrayList;
      import java.util.List;
      import java.util.Map;
      
      import static org.hyperskill.hstest.common.JsonUtils.getJson;
      import static org.hyperskill.hstest.testing.expect.Expectation.expect;
      import static org.hyperskill.hstest.testing.expect.json.JsonChecker.isObject;
      
      class EventForTest {
          int id;
          String event;
          String date;
      
          public EventForTest(int id, String event, String date) {
              this.id = id;
              this.event = event;
              this.date = date;
          }
      
          public EventForTest() {
          }
      
          @Override
          public String toString() {
              return "{ \"id\":" + "\"" + id + "\"" +
                      ", \"event\":" + "\"" + event + "\"" +
                      ", \"date\":" + "\"" + date + "\"" + "}";
          }
      
      
      }
      
      public class WebCalendarSpringTest extends SpringTest {
          EventForTest eventForTest;
      
          int count = 0;
      
          public WebCalendarSpringTest() {
      
              super(ApplicationKt.class, "../d.mv.db");
      
          }
      
          public static final String todayEndPoint = "/event/today";
      
          public static final String eventEndPoint = "/event";
      
          private static final Gson gson = new Gson();
      
          private static List<EventForTest> eventsList = new ArrayList<>();
          Map<String, String> justToday = Map.of(
                  "event", "Today is a good Day ",
                  "date", LocalDate.now().toString());
          Map<String, String> newYear = Map.of(
                  "event", "New Year's Day",
                  "date", "2024-01-01");
          Map<String, String> goodFriday = Map.of(
                  "event", "Good Friday",
                  "date", "2023-04-07");
          Map<String, String> janHusDay = Map.of(
                  "event", "Jan Hus Day",
                  "date", "2023-07-06");
      
          Map<String, String> justaPerfectDay = Map.of(
                  "event", "Perfect Day",
                  "date", randomDate(-20, 15));
          Map<String, String> anotherGoodDay = Map.of(
                  "event", "Another Good Day",
                  "date", randomDate(-10, 5));
          List<Map<String, String>> listOfEvents = new ArrayList<>();
      
          {
              listOfEvents.add(newYear);
              listOfEvents.add(goodFriday);
              listOfEvents.add(janHusDay);
              listOfEvents.add(justaPerfectDay);
              listOfEvents.add(anotherGoodDay);
      
          }
      
          Map<String, String> emptyEvent1 = Map.of("event", "", "date", LocalDate.now().toString());
          Map<String, String> blankEvent2 = Map.of("event", "     ", "date", LocalDate.now().toString());
      
          Map<String, String> nullEvent3 = Map.of("date", LocalDate.now().toString());
      
          Map<String, String> nullDate4 = Map.of("event", "New Year Party");
          Map<String, String> emptyEventNullDate5 = Map.of("event", "");
      
          Map<String, String> emptyEventEmptyDate6 = Map.of("event", "", "date", "");
      
          Map<String, String> blankDateEmptyEvent7 = Map.of("date", "    ", "event", "");
      
          Map<String, String> blankDate8 = Map.of("date", "    ", "event", "New Year Party");
          Map<String, String> blankDate9 = Map.of("event", "New Year Party", "date", "    ");
      
          Map<String, String> emptyDate10 = Map.of("date", "", "event", "New Year Party");
          Map<String, String> emptyDate11 = Map.of("event", "New Year Party", "date", "");
      
      
          private static void checkStatusCode(HttpResponse resp, int status) {
              if (resp.getStatusCode() != status) {
                  throw new WrongAnswer(
                          resp.getRequest().getMethod() + " " +
                                  resp.getRequest().getLocalUri() +
                                  " should respond with status code " + status + ", " +
                                  "responded: " + resp.getStatusCode() + "\n\n" +
                                  "Response body:\n\n" + resp.getContent()
                  );
              }
          }
      
          private String convert(List<String> trs) {
              JsonArray jsonArray = new JsonArray();
              for (String tr : trs) {
                  JsonElement jsonObject = JsonParser.parseString(tr);
                  jsonArray.add(jsonObject);
              }
              return jsonArray.toString();
          }
      
      
          CheckResult testPostEvent(Map<String, String> body, int status) {
      
              String jsonBody = gson.toJson(body);
      
              HttpResponse response = post(eventEndPoint, jsonBody).send();
              checkStatusCode(response, status);
              System.out.println(response.getContent() + "\n " + response.getStatusCode() + "\n "
                      + response.getRequest().getLocalUri() + " \n" + response.getRequest().getMethod()
                      + " \n" + response.getRequest().getContent());
              if (status == 200) {
                  count++;
                  EventForTest event = new EventForTest(count, body.get("event"), body.get("date"));
                  eventsList.add(event);
                  expect(response.getContent()).asJson()
                          .check(
      
                                  isObject()
                                          .value("message", "The event has been added!")
                                          .value("event", getJson(jsonBody).getAsJsonObject().get("event").getAsString())
                                          .value("date", getJson(jsonBody).getAsJsonObject().get("date").getAsString())
      
                          );
              }
      
              if (status == 400 && String.valueOf(response.getContent()).length() != 0) {
      
                  throw new WrongAnswer(response.getRequest().getMethod() + " " +
                          response.getRequest().getLocalUri() +
                          " responded with status code " + status + " and empty Response body, " +
                          "responded: " + response.getStatusCode() +
                          " Response body: " + response.getContent());
              }
      
      
              return CheckResult.correct();
          }
      
          private int randomReturn(List<Map<String, String>> list) {
              int toReturn = (int) Math.round(Math.random() * (list.size() - 1));
              System.out.println(toReturn);
      
              return toReturn;
          }
      
          private String randomDate(int maxDays, int mindays) {
      
              LocalDate now = LocalDate.now();
      
              return now.plusDays((int) Math.round(Math.random() * (maxDays - mindays) + mindays)).toString();
          }
      
          @DynamicTest
          DynamicTesting[] dynamicTests = new DynamicTesting[]{
      
      
                  () -> testPostEvent(justToday, 200), //#1
                  () -> testPostEvent(justToday, 200), //#2
                  () -> testPostEvent(listOfEvents.get(randomReturn(listOfEvents)), 200), //#3
      
      
                  //incorrect body for Post request
                  () -> testPostEvent(emptyEvent1, 400), //#4
                  () -> testPostEvent(blankEvent2, 400), //#5
                  () -> testPostEvent(nullEvent3, 400), //#6
                  () -> testPostEvent(nullDate4, 400), //#7
                  () -> testPostEvent(emptyEventNullDate5, 400), //#8
                  () -> testPostEvent(emptyEventEmptyDate6, 400), //#9
                  () -> testPostEvent(blankDateEmptyEvent7, 400), //#10
                  () -> testPostEvent(blankDate8, 400), //#11
                  () -> testPostEvent(blankDate9, 400), //#12
                  () -> testPostEvent(emptyDate10, 400), //#13
                  () -> testPostEvent(emptyDate11, 400), //#14
      
      
          };
      
      
      }
    learner_created: false
  - name: src/webCalendarSpring/EventResponseDTO.kt
    visible: true
    learner_created: true
  - name: src/webCalendarSpring/EventRequest.kt
    visible: true
    learner_created: true
  - name: src/webCalendarSpring/ControllerExceptionHandler.kt
    visible: true
    learner_created: true
  - name: src/webCalendarSpring/EventService.kt
    visible: true
    learner_created: true
  - name: src/webCalendarSpring/EventController.kt
    visible: true
    learner_created: true
feedback_link: https://hyperskill.org/projects/442/stages/2574/implement#comment
status: Solved
record: 1
